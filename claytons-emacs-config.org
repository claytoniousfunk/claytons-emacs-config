#+TITLE: Clayton's Emacs config
#+PROPERTY: header-args :tangle .emacs

* Information
This is Clayton's config for Emacs.

Tangle this config via ~M-x org-babel-tangle~ (~C-c C-v C-t~)

Keybinding table:

| Command                      | Keybinding |
|------------------------------+------------|
| General-use                  |            |
| ~M-x replace-string~         | ~C-c r~    |
| ~M-x comment-region~         | ~C-c ;~    |
| ~M-x uncomment-region~       | ~C-c u~    |
| ~M-x calculator~             | ~C-c =~    |
| Terminal                     |            |
| ~M-x multi-term~             | ~C-c m~    |
| ~M-x term-stop-subjob~       | ~C-c z~    |
| Org                          |            |
| ~M-x org-store-link~         | ~C-c l~    |
| ~M-x org-agenda~             | ~C-c a~    |
| ~M-x org-capture~            | ~C-c c~    |
| Org Roam                     |            |
| ~M-x org-roam-buffer-toggle~ | ~C-c n l~  |
| ~M-x org-roam-node-find~     | ~C-c n f~  |
| ~M-x org-roam-insert~        | ~C-c n i~  |
| ~M-x org-roam-dailies-map~   | ~C-c n d~  |
| Notmuch                      |            |
| ~M-x notmuch~                | ~C-c e~    |

* Menu and window
#+BEGIN_SRC elisp
  (when window-system (set-frame-size (selected-frame) 90 30)) ; frame size
  (setq inhibit-startup-message t) ; skip the startup screen
  (scroll-bar-mode -1) ; disable the scroll bar
  (tool-bar-mode -1) ; disable the tool abr
  ;;(set-fringe-mode 10) ; give some breathing room
  (menu-bar-mode -1) ; disable the menu bar
  (setq visible-bell t) ; set up the visible bell
  (blink-cursor-mode 0) ; disable the blinking cursor
  (use-package saveplace
    :init (save-place-mode)) ; save place in the buffer
  (setq-default cursor-type 'bar) ;; bar-style cursor
#+END_SRC 

* Package sources
#+BEGIN_SRC elisp
  ;; initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC 

* Custom keybindings
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c r") #'replace-string)
  (global-set-key (kbd "C-c m") #'multi-term)
  (global-set-key (kbd "C-c u") #'comment-or-uncomment-region)
  (global-set-key (kbd "C-c z") #'term-stop-subjob)
  (global-set-key (kbd "C-c =") #'calculator)
#+END_SRC 

* Theme
#+BEGIN_SRC elisp
  (add-to-list 'load-path "~/.emacs.d/modus-themes")
  (require 'modus-themes)
  (setq custom-safe-themes t) ;; treat themes as safe
  (require 'doom-themes)
  (require 'standard-themes)
  ;; Set theme
  ;; theme packages
  (use-package standard-themes)
  ;; load theme
  (load-theme 'modus-operandi-deuteranopia) ;; light theme
  ;; (load-theme 'modus-vivendi-deuteranopia)     ;; dark theme


#+END_SRC 

* ESC key
make ESC quit prompts
#+BEGIN_SRC elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC 

* Delete-selection-mode
overwrite selected text
#+BEGIN_SRC elisp
  (delete-selection-mode 1)
#+END_SRC 

* Desktop-save mode
save state of emacs session
#+begin_src elisp
  (desktop-save-mode 0)
#+end_src

* Rainbow delimiters
#+BEGIN_SRC elisp
  ;; show parentheses
  (show-paren-mode 1)
  ;; use rainbow delimeters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC 

* Transparency
#+BEGIN_SRC elisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(75 . 100))
  ;; (add-to-list 'default-frame-alist '(alpha . (75 . 100)))
#+END_SRC 

* Font
#+BEGIN_SRC elisp
  (set-face-attribute 'default nil :font "UbuntuMono Nerd Font" :height 125)
  ;;(set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
  ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 105)
#+END_SRC 

* Counsel

#+BEGIN_SRC elisp
  ;; include counsel package for searching
  (use-package counsel
    :bind(("M-x" . counsel-M-x)
	  ("C-x b" . counsel-ibuffer)
	  ("C-x C-f" . counsel-find-file)
	  :map minibuffer-local-map
	  ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
#+END_SRC 

* Projectile
#+BEGIN_SRC elisp
  ;; (use-package projectile
  ;;   :diminish projectile-mode
  ;;   :config (projectile-mode)
  ;;   :custom (projectile-completion-system 'ivy)
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map)
  ;;   :init
  ;;   (when (file-directory-p "/home/clayton")
  ;;     (setq projectile-project-search-path '("/home/clayton")))
  ;;   (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;;   :config (counsel-projectile-mode))

#+END_SRC

*
Evil Mode
enable evil mode (vim keybindings)

#+BEGIN_SRC elisp
  ;;(require 'evil)
  ;;(evil-mode 0)
#+END_SRC 

* Org mode
"Org is a highly flexible structured plain text file format"

[[https://orgmode.org/][Org Mode website]]

** Org declaration
#+BEGIN_SRC elisp
  (use-package org
    :ensure t
    :config
    (setq org-ellipsis " ▾"
  	org-hide-emphasis-markers nil
  	global-emojify-mode t
  	)
    )
  ;; set directory for org agenda
  (defun my-org-files ()
    "Return a list of all .org files in the ~/Analysis/org directory and its subdirectories."
    (directory-files-recursively "~/Analysis/org" "\\.org$"))
  (defun load-org-files()
    "Load my-org-files so that they appear in Org-agenda"
    (setq org-agenda-files (my-org-files)))
  (add-hook 'org-mode-hook 'load-org-files)
  (add-hook 'org-agenda-mode-hook 'load-org-files)

#+END_SRC 
** Org Agenda
#+BEGIN_SRC elisp
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time) ;; add a time-stamp once a task is completed
  (setq org-log-into-drawer t)
  (setq org-agenda-include-diary t) ;; inclulde diary entries in org-agenda
#+END_SRC 
** Face font size

#+BEGIN_SRC elisp
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.15)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.0)
		  (org-level-6 . 1.0)
		  (org-level-7 . 1.0)
		  (org-level-8 . 1.0))))
#+END_SRC 

** Org key-bindings
#+BEGIN_SRC elisp
  ;; org key-binds (from org-manual)
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC 

** Style
#+BEGIN_SRC elisp
  ;; org bullets
  ;; (use-package org-bullets
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; ;;wrap lines in org-mode
  (add-hook 'org-mode-hook
	    (lambda ()
	      (toggle-truncate-lines nil)))
  ;; set separator lines to zero in org
  ;;(setq org-cycle-separator-lines 0)
  ;; replace hyphen list with dot
  ;; (font-lock-add-keywords 'org-mode
  ;; 			'(("^ *\\([-]\\) "
  ;; 			   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ;;

  ;; don't display line-numbers in org-mode or org-agenda
  (defun nodisplaylinum()
    (display-line-numbers-mode 0)
    )
  (add-hook 'org-mode-hook 'nodisplaylinum)
  (add-hook 'org-agenda-mode-hook 'nodisplaylinum)
  ;; add some space to the left edge of the buffer
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 140
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;; (use-package visual-fill-column
  ;;   :hook (org-mode . efs/org-mode-visual-fill))

#+END_SRC 

** "TODO" keywords
#+BEGIN_SRC elisp
  ;; set TODO types
  (setq org-todo-keywords '((type "TODO" "IN PROGRESS" "WAIT" "|" "DONE")))
#+END_SRC 

** Tags
#+BEGIN_SRC elisp
  ;; set TODO tags
  (setq org-tag-alist '(("@curious" . ?c)
			("@Analysis" . ?A)
			("@CERN" . ?C)
			("@FNAL" . ?F)
			("@UIC" . ?U)
			("@Personal" . ?P)
			("@morningPages" . ?o)
			("@HLT" . ?H)
			("@AlCaDB" . ?D)
			("@MC" . ?M)
			("@highPT" . ?h)
			("@DQM" . ?Q)
			("@muons" . ?m)
			("@jets" . ?j)
			("@thoughts" . ?t)
			("@jetFlavor" . ?r)
			("@ghosts" . ?x)
			("@jetReconstruction" . ?q)
			("@muonReconstruction" . ?w)
			("@templates" . ?y)
			("@forests" . ?u)
			("@systematics" . ?s)
			("@production" . ?p)))

#+END_SRC 

** Org Roam
#+BEGIN_SRC elisp
  ;; org-roam
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Analysis/org/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
  ;; set journal directory
  (setq org-roam-dailies-directory "journal/")

  ;; set date/time to each entry
  ;;(setq org-roam-dailies-capture-templates
  ;;	'(("d" "default" entry "* %<%I:%M %p>: %?"
  ;;	   :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

#+END_SRC 

** Latex
org-mode latex fragment preview settings
#+BEGIN_SRC elisp
  (setq org-format-latex-options
	'(:foreground default
		      :background default
		      :scale 1.5)
	)
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
#+END_SRC 

** Export options
SCHEDULED: <2024-09-02 Mon>
#+BEGIN_SRC elisp
  ;; disable line-numbers in org-export
  (setq org-export-with-section-numbers nil)
#+END_SRC

* Latex
#+begin_src elisp
  (use-package tex
    :ensure auctex)
  (setq tex-fontify-script nil)
  ;; (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  ;; (add-hook 'latex-mode-hook #'turn-on-cdlatex)   ; with Emacs latex mode
#+end_src

* Magit
Magit : "A Git Porcelain inside Emacs"
https://magit.vc

#+BEGIN_SRC elisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC 

* Forge
"Forge allows you to work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs"
https://magit.vc/manual/forge/
#+BEGIN_SRC elisp
  (use-package forge)
#+END_SRC 

* Dashboard
An extensible emacs startup screen showing you what’s most important.
[[https://github.com/emacs-dashboard/emacs-dashboard][
https://github.com/emacs-dashboard/emacs-dashboard]]

#+BEGIN_SRC elisp
  ;; (require 'dashboard)
  ;; (dashboard-setup-startup-hook)
  ;; ;; Set the title
  ;; (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  ;; ;; Set the banner
  ;; (setq dashboard-startup-banner 'logo)
  ;; ;; Value can be
  ;; ;; - nil to display no banner
  ;; ;; - 'official which displays the official emacs logo
  ;; ;; - 'logo which displays an alternative emacs logo
  ;; ;; - 1, 2 or 3 which displays one of the text banners
  ;; ;; - "path/to/your/image.gif", "path/to/your/image.png", "path/to/your/text.txt" or "path/to/your/image.xbm" which displays whatever gif/image/text/xbm you would prefer
  ;; ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; ;; Content is not centered by default. To center, set
  ;; (setq dashboard-center-content t)

  ;; ;; To disable shortcut "jump" indicators for each section, set
  ;; (setq dashboard-show-shortcuts nil)

  ;; (setq dashboard-items '((recents  . 5)
  ;; 			(bookmarks . 5)
  ;; 			(projects . 5)
  ;; 			(agenda . 5)
  ;; 			(registers . 5)))

  ;; ;; set icons
  ;; (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package

  ;; ;; show navigator below the banner
  ;; (setq dashboard-set-navigator t)

  ;; ;; load and display init info
  ;; (setq dashboard-set-init-info t)

  ;; ;; use counsel-projectile
  ;; (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

  ;; ;; add agenda items
  ;; (add-to-list 'dashboard-items '(agenda) t)
  ;; (setq dashboard-week-agenda t)
  ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)

#+END_SRC

* Command-log-mode
#+BEGIN_SRC elisp
  (use-package command-log-mode)
#+END_SRC 

* Beacon

#+BEGIN_SRC elisp
  (beacon-mode 0)
  ;;(setq beacon-color "#E2F516")
  (setq beacon-color "#ff8c00") ; orange beacon
#+END_SRC 

* Minimap
#+BEGIN_SRC elisp
  (minimap-mode 0)
  (setq minimap-window-location 'right)
#+END_SRC 

* Line numbers
#+BEGIN_SRC elisp
  ;; line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line-numbers in multi-term
  (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode 0)))
#+END_SRC 

* which-key
Which-key function: displays the key-bindings in a lower window

#+BEGIN_SRC elisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1.0))

#+END_SRC 

* ivy
#+BEGIN_SRC elisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; ivy-rich, display desciptive information about M-x commands
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+END_SRC 

* ivy-rich
display desciptive information about M-x commands
#+BEGIN_SRC elisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+END_SRC 

* all-the-icons
NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:
 
M-x all-the-icons-install-fonts

#+BEGIN_SRC elisp
  (use-package all-the-icons)
#+END_SRC 

* doc-view
#+BEGIN_SRC elisp
  (setq doc-view-scale-internally nil)
#+END_SRC 

* diary
Your diary keeps track of appointments and important dates.

The diary filepath is  ~~/.emacs.d/diary~

Keep your diary up to date!
Display the diary for the day upon launch, make fancy.

Some configuration copied from [[https://www.emacswiki.org/emacs/DiaryMode][https://www.emacswiki.org/emacs/DiaryMode]]

#+BEGIN_SRC elisp
  ;; display calendar and diary in a fancy way
  (setq calendar-view-diary-initially-flag t
	diary-number-of-entries 7
	diary-display-function #'diary-fancy-display)
  (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

  ;; display diary upon launch
  ;;(diary)
#+END_SRC 

* dired
#+BEGIN_SRC elisp
  ;; icons in dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  (add-hook 'dired-mode-hook 'nodisplaylinum)
#+END_SRC 

* ibuffer
#+BEGIN_SRC elisp
  ;; icons in buffer
  (add-hook 'ibuffer-mode-hook #'all-the-icons-ibuffer-mode)

  (use-package all-the-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

  ;; Predicate whether the icons are able to be displayed."
  (setq all-the-icons-ibuffer-display-predicate #'display-graphic-p)

  ;; Whether display the icons.
  (setq all-the-icons-ibuffer-icon t)
  ;; Whether display the colorful icons.
  ;; It respects `all-the-icons-color-icons'.
  (setq all-the-icons-ibuffer-color-icon t)

  ;; The default icon size in ibuffer.
  (setq all-the-icons-ibuffer-icon-size 1.0)

  ;; The default vertical adjustment of the icon in ibuffer.
  (setq all-the-icons-ibuffer-icon-v-adjust 0.0)

  ;; Use human readable file size in ibuffer.
  (setq  all-the-icons-ibuffer-human-readable-size t)

#+END_SRC 

* all-the-icons
#+BEGIN_SRC elisp
  (require 'all-the-icons-gnus)
  (all-the-icons-gnus-setup)
#+END_SRC 

* pdf-view
#+BEGIN_SRC elisp
  ;;wrap lines in org-mode
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook
	    (lambda ()
	      (display-line-numbers-mode 0)))
#+END_SRC 

* Email
This is a bit experimental, but I want to try and manage email within emacs.  

#+BEGIN_SRC elisp
  ;; (setq smtpmail-default-smtp-server "smtp.gmail.com")
  ;; (require 'smtpmail)
  ;; (setq send-mail-function 'smtpmail-send-it)
  ;; (setq message-send-mail-function 'smtpmail-send-it)
  ;; (setq user-full-name "Clayton Bennett")
  ;; (setq smtpmail-local-domain "gmail.com")
  ;; (setq user-mail-address (concat "cbennett0715@" smtpmail-local-domain))
  ;; (setq smtpmail-servers-requiring-authorization ".*")
  ;; (setq smtpmail-debug-info t)
#+END_SRC 

#+BEGIN_SRC elisp
  (setq user-mail-address "cbenne22@uic.edu"
	user-full-name "Clayton Bennett")
  (setq mail-user-agent 'message-user-agent)
  (setq message-send-mail-function 'smtpmail-send-it
	smtpmail-stream-type 'starttls
	smtpmail-smtp-server "smtp.gmail.com"
	smtpmail-smtp-service 587)
#+END_SRC 

#+BEGIN_SRC elisp
  ;; Configure known SMTP servers. Emacs prompts for passwords and saves them in ~/.authinfo
  ;; (setq smtp-accounts          ;; Format: Sender Mail address - SMTP Server - Port - Username
  ;;       '(("cbennett0715@gmail.com" "smtp.gmail.com" 587 "cbennett0715@gmail.com")
  ;; 	("cbenne22@uic.edu" "smtp.gmail.com" 587 "cbenne22@uic.edu")
  ;; 	("clayton.bennett@cern.ch" "smtp-mail.outlook.com" 587 "clayton.bennett@cern.ch")
  ;; 	))

  ;; ;; Set the SMTP Server according to the mail address we use for sending
  ;; (defun set-smtp-server-message-send-and-exit ()
  ;;   "Set SMTP server from list of multiple ones and send mail."
  ;;   (interactive)
  ;;   (message-remove-header "X-Message-SMTP-Method") ;; Remove. We always determine it by the From field
  ;;   (let ((sender
  ;; 	 (message-fetch-field "From")))
  ;;     (loop for (addr server port usr) in smtp-accounts
  ;; 	  when (string-match addr sender)
  ;; 	  do (message-add-header (format "X-Message-SMTP-Method: smtp %s %d %s" server port usr)))
  ;;     (let ((xmess
  ;; 	   (message-fetch-field "X-Message-SMTP-Method")))
  ;;       (if xmess
  ;; 	  (progn
  ;; 	    (message (format "Sending message using '%s' with config '%s'" sender xmess))
  ;; 	    (message-send-and-exit))
  ;; 	(error "Could not find SMTP Server for this Sender address: %s. You might want to correct it or add it to the SMTP Server list 'smtp-accounts'" sender)))))
#+END_SRC 

* Notmuch
Notmuch -- Just an email system

https://notmuchmail.org/

#+BEGIN_SRC elisp
  (autoload 'notmuch "notmuch" "notmuch mail" t)
  (setq notmuch-search-oldest-first nil)
  (setq org-agenda-max-depth 3)
  ;; turn off line numbers (thanks ChatGPT for writing this)
  (add-hook 'notmuch-show-mode-hook (lambda () (display-line-numbers-mode -1)))
  (add-hook 'notmuch-search-mode-hook (lambda () (display-line-numbers-mode -1)))
  (add-hook 'notmuch-hello-mode-hook (lambda () (display-line-numbers-mode -1)))
  ;; custom keybindings
  (global-set-key (kbd "C-c e") #'notmuch)
  ;; custom search settings
  (setq notmuch-saved-searches
   '((:name "inbox" :query "tag:inbox" :key "i")
     (:name "unread" :query "tag:unread" :key "u")
     (:name "todo" :query "tag:todo" :key "t")))

#+END_SRC 

* Emojis
#+BEGIN_SRC elisp
  (setq global-emojify-mode t)
#+END_SRC 

* Scratch buffer
#+BEGIN_SRC elisp
  (setq initial-scratch-message ";; scratch buffer \n\n")
#+END_SRC 
* Slime
#+BEGIN_SRC elisp
(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+END_SRC
